package rosalind

import (
	"errors"
	"strings"
	"testing"
)

func TestNewDNA_invalidChar(t *testing.T) {
	t.Parallel()

	_, err := NewDNAString("ACGTX")
	if !errors.Is(err, ErrInvalidGeneticString) {
		t.Errorf("expected %s, got %s", ErrInvalidGeneticString, err)
	}
}

func TestDNA_Count(t *testing.T) {
	t.Parallel()

	tests := map[string]map[rune]int{
		"AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC": {
			'A': 20,
			'C': 12,
			'G': 17,
			'T': 21,
		},
		"ACGT": {
			'A': 1,
			'C': 1,
			'G': 1,
			'T': 1,
		},
		"": {
			'A': 0,
			'C': 0,
			'G': 0,
			'T': 0,
		},
		"acgtACGT": {
			'A': 2,
			'C': 2,
			'G': 2,
			'T': 2,
		},
	}

	for test, want := range tests {
		t.Run(test, func(t *testing.T) {
			dna, _ := NewDNAString(test)

			aCount, cCount, gCount, tCount := dna.Count()
			if aCount != want['A'] {
				t.Errorf("A expected %d, got %d", want['A'], aCount)
			}
			if cCount != want['C'] {
				t.Errorf("C expected %d, got %d", want['C'], cCount)
			}
			if gCount != want['G'] {
				t.Errorf("G expected %d, got %d", want['G'], gCount)
			}
			if tCount != want['T'] {
				t.Errorf("T expected %d, got %d", want['T'], tCount)
			}
		})
	}
}

func TestDNA_Count_double(t *testing.T) {
	t.Parallel()

	dna, _ := NewDNAString("AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC")
	a1, c1, g1, t1 := dna.Count()
	a2, c2, g2, t2 := dna.Count()

	if a1 != a2 {
		t.Errorf("%d != %d", a1, a2)
	}
	if c1 != c2 {
		t.Errorf("%d != %d", c1, c2)
	}
	if g1 != g2 {
		t.Errorf("%d != %d", g1, g2)
	}
	if t1 != t2 {
		t.Errorf("%d != %d", t1, t2)
	}
}

func TestDNA_CountThreaded(t *testing.T) {
	t.Parallel()

	tests := map[string]map[rune]int{
		"AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC": {
			'A': 20,
			'C': 12,
			'G': 17,
			'T': 21,
		},
		"ACGT": {
			'A': 1,
			'C': 1,
			'G': 1,
			'T': 1,
		},
		"": {
			'A': 0,
			'C': 0,
			'G': 0,
			'T': 0,
		},
		"acgtACGT": {
			'A': 2,
			'C': 2,
			'G': 2,
			'T': 2,
		},
	}

	for test, want := range tests {
		t.Run(test, func(t *testing.T) {
			dna, _ := NewDNAString(test)

			aCount, cCount, gCount, tCount := dna.CountThreaded()
			if aCount != want['A'] {
				t.Errorf("A expected %d, got %d", want['A'], aCount)
			}
			if cCount != want['C'] {
				t.Errorf("C expected %d, got %d", want['C'], cCount)
			}
			if gCount != want['G'] {
				t.Errorf("G expected %d, got %d", want['G'], gCount)
			}
			if tCount != want['T'] {
				t.Errorf("T expected %d, got %d", want['T'], tCount)
			}
		})
	}
}

func TestDNA_String(t *testing.T) {
	t.Parallel()

	dna, _ := NewDNAString("AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC")
	str := dna.String()

	if str != "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC" {
		t.Errorf("expected %s, got %s", "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC", str)
	}
}

func TestDNA_ToRNA(t *testing.T) {
	t.Parallel()

	tests := map[string]string{
		"GATGGAACTTGACTACGTAAATT": "GAUGGAACUUGACUACGUAAAUU",
		"":                        "",
		"ACG":                     "ACG",
		"TTT":                     "UUU",
	}

	for test, want := range tests {
		dna, _ := NewDNAString(test)
		rna := dna.ToRNA()
		rnaStr := rna.String()

		if rnaStr != want {
			t.Errorf("expected %s, got %s", want, rnaStr)
		}
	}
}

func TestDNA_Complement(t *testing.T) {
	t.Parallel()

	tests := map[string]string{
		"AAAACCCGGT": "TTTTGGGCCA",
		"":           "",
		"ACGT":       "TGCA",
	}

	for test, want := range tests {
		t.Run(test, func(t *testing.T) {
			dna, _ := NewDNAString(test)
			complement := dna.Complement().String()

			if complement != want {
				t.Errorf("expected %s, got %s", want, complement)
			}
		})
	}
}

func TestDNA_Complement_reverse(t *testing.T) {
	t.Parallel()

	tests := map[string]string{
		"AAAACCCGGT": "ACCGGGTTTT",
		"":           "",
		"ACGT":       "ACGT",
	}

	for test, want := range tests {
		t.Run(test, func(t *testing.T) {
			dna, _ := NewDNAString(test)
			complement := dna.Complement().StringReverse()

			if complement != want {
				t.Errorf("expected %s, got %s", want, complement)
			}
		})
	}
}

func BenchmarkDNA_Count(b *testing.B) {
	dnaData := []byte(strings.Repeat("ACGT", 1<<28))
	dna, _ := NewDNA(dnaData)

	b.Run("count", func(b *testing.B) {
		b.ResetTimer()
		for iter := 0; iter < b.N; iter++ {
			dna.Count()
			dna.counted = false
		}
	})
	b.Run("threaded", func(b *testing.B) {
		b.ResetTimer()
		for iter := 0; iter < b.N; iter++ {
			dna.CountThreaded()
			dna.counted = false
		}
	})
}

func TestDNA_GCContentPercent_7decimals(t *testing.T) {
	t.Parallel()

	tests := map[string]float64{
		"CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGGTGGAAT": 0.6091954,
		"":     0,
		"ACGT": 0.5,
		"CC":   1,
		"G":    1,
		"AAAA": 0,
		"AAAC": 0.25,
		"AAC":  0.3333333,
	}

	for test, want := range tests {
		t.Run(test, func(t *testing.T) {
			dna, _ := NewDNAString(test)
			gc := dna.GCContentPercent()

			want7 := int(want * 10000000)
			got7 := int(gc * 10000000)

			if got7 != want7 {
				t.Errorf("expected %f, got %f", want, gc)
			}
		})
	}
}

func TestDNA_GCContentPercent_maxFASTA(t *testing.T) {
	t.Parallel()

	data := strings.NewReader(`>Rosalind_1541
GGTGGCCGCTGTCCTTTCTTCCCAGTGCGAGTTACTGATTTTGTAGCTGCCGTAATTGTC
GCTGCGGGAACTGGAGGCATCGTAGGGGTGCTCTCACCAGAACTTAAAGCATGCTCACGC
CTCTGCACCAAACCAGGTCTTACCCGCTATCGGGAGCAGTTGCCATGGAAGATGCTTCCT
CTTTCAATGGCCACTGCATGCTCCAAATGGTTCCGGTTTTATTCGCGACAACATATGTAG
TCGATCGCCTCAATCACGTTCCGTTACGAAATCACTGGGCCCGGGGCCCAGATACTCTTT
CCTCCCTTCTTTACTATTCGGCCGAGACCAACGCCTTAAGCGGACTAAACTACGCATGTT
TCTTCCGAGAGGTTTTTGGTCAACAGTTCTCCTAGAGTCTTTAGCTTTGAGTCACTTTTT
TCATACTGGGATAGATGACCAGCCAGGGATCGGTTCTCAGGACTAGAGAGCTGGCATACC
TCGTGGGCACGCAAGAGCCGCATGTATGTAGACTCTCATAGCCCTTCCCTCTCCGCTCCT
GAGATACCAGCGCGGTACCTCTCTTAGAACAGCAGCTCCCAGCCAGGAACAAAAGATCGC
AGATCTGGTTAATACGTACATTTTGTTGCAATGGTCTTTTCTCGGATAGTTATGAAACCG
TCCACAGACTTGGTCCAGGTACTAAGAGTGTGAAACGTTCAAACCAGCTTAACGGGTGAC
AGTCCGCGACGCTCCGTTACGTCACCGGGCCTGAACGTACACAATTTACCACGCGCAGCA
ACCACATTCTTTTACACTTTATTAAGCTAAGGGAGGCTTATGGTGCTTACCCCCCGATT
>Rosalind_6593
TCCCAATAAGAACGCTTTGGACGTCGTGCCTTGTATTACTGTCTGCCCAATGTTCGCGGT
TTTTAAGATGAAGCGAGCACTTGTCCGCACTCTAACGGCCCACAACGCAAAAGTGTGGAT
TTCGTGACCCGACGATCGCTGCAAGCTGGTCAAGCTGGTGTCACCGGGAGGTTCGCGAGG
CAGAGTAAATATTCGGTCGAGTCGTAGGTGTGTTACCGGTCATATCGCGGTGCGGATGAA
ATCATCGTGTACCTTGGCTTAATCGCTACGCATACGGTATTTGAATTGGGAGAGTCTGTG
GTTCGATCGCAAGAATTGACAATGTGCTAACTGCTCCGTCCTGGGCATCAAAGGAAGTAA
TGATTACACTCGAGTGGGTACCAATGCCCCGGCCCAAGCAAGGGGCGTTACATGGCCCTG
TATAGTTTCCCGGTCAACGTCTTTATTTTACTTCATCCGTTGTGGGTTGCACCATCATGA
ATTCCTATACTCTCCTCGGTTTGAATGATGTACGTTGGGATCTGTTCAAATCAAAAAGGC
ACTCTCGCTATGCTTACATACGCGTGGGTATTTATTAGCCTCTTATCTACTGATCAGGTG
GTAATTGTGGTAGCGGCAGAGAACATTTGACGTACGCTGCACTGAGGATAGAGTCCCACG
GGAGCACACTCGTCCATGGCAACTCCGGGTGACCCACATGGTAACCTGTTGAGCACTGAA
GTAGCAATCTCAAATGCCTTAGTTGGTTGGTATCCGTGCAAATGATTGCGGTAGGGGTTG
CCAGGCATTAAGGTCCGGCGAGCTTTGCAACAACTTCCTAAGTGTTAGGGTCTTCAGCGC
TCGCCTGGGTTTGTAGCCGAACAGGCTATCTGGAGGAATCGCTGTAAACTAGCCGAACCT
TCGCTAGACCACGCTTGATATCCTCTGGGGACCCACAATGTTTCCTCCTCGATGCCGCTC
CCGCTGGTGC
>Rosalind_8890
GTAAGAGTTGTAAATCAACTAACAATTCAGTCAAGCAGTCGTGCAAATGAAGGTGCAGCG
ACTTTACGTAATTAGATAATCCCATGTCGAACCGTATTGCTAGTCAGCTAGAAGCTGGAC
AACAGGTCACACGTCATCCTACTCTGGACCCCCTTCTCGTTATGGTTCGCCTTATCTCGG
GCTGGATTGGAATAGTCGATCGTAGGAGATTCACATTCCTGGCTCCACTACACGAAAGGG
CCCGGTCTGTGGGAGCATCGACAGGCTGATCTTGTGCCTTCCTTTTCTTGTGTCTTGCAA
GCTGAAATCGCACGAGGCCGCTTTTCATCATCTTGGATCCATGACACGGTGGGGTAACAC
CAGCTGTTCTCGTAGCAAAGCGACTGTTCTATTCGCGTCGCCTGATTGGTTGGAATGTGA
GTGGATTAATATCTCGACCTCAAACAACCAAGAAAACGGAAATGCTTCATAAACATTAAT
TAGGTCAGGGCGTTAATAAGGGATATAAGGGAAGCCGCGACTATCCGCATAGGTAGAGCG
CATGGGACAACCATGGTTCAACTCTATTGTCATGATATCCATCATCAGTTCCAGTGCTCT
ACGACGACTACAGTTAAGCAAACGCCTCTTTAGGTCCGGGCGATCGACAATCTGCAAGCG
AACGCTTTCGATAGACAGATAACGAAGCTACTCGCCAGGCCTTTCGTCCACCTCTCCGCA
CCGCACTTGGAACGAATCCATGAACTTCGGTAAAAACTGAAGGTATGTAAACCACAATGG
AAGCGTACACATCCTACGGTTGTTCCCCGATCCGTTCAGTTTCAAGAATTACTAGGGTAG
TATGCTCCACGCGACCGGGTGTTGCGGATGTGTCGGCGGACTAAGTACGACGACTTAGCA
TATAATCTGGTTTACCTCGCATTAAAGAGGTGTTTCACTGGTTACAGTAGAATTAGAAGA
CAGTAATTCTGTATTGAACACTGTCA
>Rosalind_5933
TTTCATACCCCTAAACCGCGCGCCTGTCCCCAAAGTCGCGTCTTCATCGGTATAGCCACA
ACGGAGCGTAGGGCTCTGGGAGTTTTAAAGGGCTCTTTCCCCCAGACAACTTTATACTCG
TACCACGACCACGTGCCTGTTTCTATAAAAGAGTCGGTATAGGACTCCGTGATTCCATGC
ACTACCTTAAAATATACCACACATTAAATCGAGCGGGCCACAATAGAGGGCCTTCACCAT
GGGGTAGTAGTACACCAGGGCACTCCAGATACACACATTGATTACTCCACCCCACAGCTC
TGTGAGCCCACGCATTTCCCAGTCCGAAATTAATGCAAAACCGACGTGGCGACTAACTGC
CTTTCAGATACGGCTAATATCAAATCAACCGTGATATTCCGTGATGCGACACTGGTTATT
GACCATCACATCGGAACATTACTCGTAGCGCGCTAACGCTGACTAGTTCCATGTTATCTG
ATGAAACTGCTGCCTTGAAAATCTGGTTTCAGGATATCCACCATCCTCTTAGTCGGAGAG
AGCGCAACATGCCGATGCCTCAAGCGTTTATATCTAGGCGCAGCACAGGACGCTAAATAA
AATTGGGTAAAGGAAGTGGATCGTCTGCCAAGTAGCTGGGCCATCAAGAAAAAATCATTA
TGTAGCCACACTATGCGGTACATGGGTTAAGCCCAATTCTGGCATTTTTGCGAGCGGAGA
GGTCCGCCCTCTCCGACGATAGCGTGTGGTTGCCCACCGCTAAGCGGCGCATTTTCCGAC
GGGTTTACCTTAGCGCTCCATATTGCCACGTAGCGATCCATACTAACCTTAAACTGGAGT
CCAAGTATTAGACCTATCGCTCCATCCAAGACGTATTGTACGTTCACTGAGGAACTCCAT
CGAGACCAGGAAAAACCTCGCCTGGGAGTGCCGCACCCAACCCGATAGTGTGAATCCTG
>Rosalind_2065
AACATATTCGGCTAACACGATTGTTCTTTGGCTTTCTCATACCAATTTCATTTGTCACAC
TTGCGACCAGGGTAAAGCCTTGTAAGTGATCAGAGTTGAGATACCGATATTGTAGCTGTG
GCTTTTGACGGCACCACTCAAGGCATATGGTCAGCTGCATGCCCACCGGAGGAAGGCGCT
GAGGATCACTCGTCAGGGGACTTCTAGAATCTCTCCGCAACTTATTACCCAGGATCCTCG
GGCAGGTATTAGGTTACGCTACTGAGAAGTAAGGTCTCCGATACACCCAAAGAGGGCTTT
TCCCGATATCTCGCTACACTGCCATATCTCGTTCTTATGCCTAGTACTATAAACCGAGAA
ATAGAGCTGACGACCACCCTGGCATCCGTTGGCCACCGGCGTCGGTCTACTCCGCTATCA
GCACTTTAGTTTTGTCATTAAAAGATCATCTAACCTTTTTCCCAGACCATATATGAGTGC
TCCGAACGTACTAATGAATCAAGGGCGCATACTTCGCCCTAACTTAATGAAACAGTAACA
GCCACTATGGGTCCAGTAAAGTGCACGCGTATGTCGAAACCTCTGTCCTTGCAGTCACGC
ATAATAGTAGATAAGTCGAGGCACTGGAACGATTTGCGGGCCCACATTCTTGCACCAGCG
CAAAATAGGTTCCTTGTCGCGATGCCGAAACCCGGTTTCATGTTTTAATCAAGAAGAAAC
TCCGGATGCTAGAAGCAAGCCGAGTTACGGTCTGCACGATAGTTAGAGGCAAGGAAAGCG
TAGACTCGGTGCGCCGGACGGGAGCTGCCGTATAGTACACCTATCGCTAGGACCCGCTTA
TACGCGAACCACGGTTAAATCCACAAACCGGAGCGTTCTGGCGGTG
>Rosalind_0808
GGCAAAAAATTGTGGCGACTCAACACTCGTCTAATTCAGGGGGGTCCTCCGCCTAGGCAG
CCAAATAACGACTAACGTCACGTCGAATGGGCGACCTTCTAATGTTTTGGCCCGAACAAA
ACATATGCCTGATGTACATTCCCGGCTTACTCGGGAATCGCGAGCCTCACTATGTCGTGA
GAGCTGAACATGGAGATGATCCCACAACAGAGTAAGCGCCTTCGTGAGACCGTTGGGGCG
GAGGATACGTTTAACCAGGGAAGGCTTATGTGGGAAGTCGCGCCAATACAATTAATAGCG
AAATGAAGTGTATCTGGCGGAGCAGAAATATGGCGAGTACCTTCAGTCATGCTGCTTCGT
TAGGGGAGGGCTTAGGTGAAACAACCTCAATTTCGCAAACATACTTACCTAGGAAGATTA
GCTGCCCGCGTACATAAGGGCCACGTACTAAGCCAGTCCCGCTCAGCGACTATCCAACAT
ATACCTAAGAGTAGGGCAACTTGCAGCGGGCGAGACGGGTGACGTACGGCGGTTGTACTG
AAGCACCAACTCAGACCCGGCCGCTGAGCCTTGTTAAGCGTAACGCCCCTGCGCACCGAA
CAATTTTAGGAGAAAACAAACCAATGAGTGGTATTTAAAGTCGTGGGATTTCCCAGAGTG
ATGAGATATGAGTTCGCCTTCTGTGGTAGTCTACTTCGGGTGAACCGGCCAACCCAAGAA
TCGAATTTGCGGCATGGTAGCCAAGTGCTCGTTATGTGTGCTCTTCAGAGAACTGGATCA
GCGCTCTAGATAGGTGGATACCCACCTGTTCGTCCTCCGAACTTTGTGCATCTGCTGTGA
AAGGTACCC
>Rosalind_5387
TTCGGAGGTCGTAGAATTCTGATCGTTAACAGTTAGCTCAAATGGCTAGCTTCTACTGCA
GCTTTAGGATTGATTCAAGGCTGAGTCCTCTTTCGAAAGTGGTGGTTTCTCTCGGGTTTT
ACATATGGTAAGGATAAGGCCATCAGCCTAGAGAAAGTGCACAACGAAACACGGCATTCC
GTCAAATCTTGCACTTCAAGCGAGAGACATTGAGTTAAGCGTTTAACAGTGTATCGCTTC
CGCGTAGTAAACCTGTCATCCTCTATGTGCTTAACCGGCTGCCATGAAAAACAGGGAGGA
ATTCAACGCGGGTACGCGTAACCGCATTGCCCCAGTTTTCTGCTCCGAGATGGATTGCGC
TGCGCGTTTCGCTTATGAAACGCGTGAACGGCCTTGAGGGTGTGCCCTGAAACGACTCGC
GCTTATAAGTACTGTCGATGCGCACAGTTAGTCGTGCTGAGCGCAGGCCCGATTTCCAAT
TGGGGTCAGTGCTGCGATCCGTAGCCAAGTAGCTGAGCGGCAACGCCTCGAGTACGGGCA
GGTTGAGAACTTGGACCGCCCTCCTGGCTGAACTAAGGGAATGCGCATATTAGGCTAGCT
GAGGACCCGGAATGTAAGCGCTGGCCTCAAACGTGTCCTATGAACTGAAAGTTGTCTACT
ACTTCGGAGGACGTGTGTTATAGCAGATCAGAGGTTTACTTTTTAGCACGGCCTTAGTCA
AGATGGATGCTTTTGTATAGATACTCCTGATATATCGAATCCATCGTGCTGTTAGGCAGC
AGTTTAATAAGCGTTGCGTACCTAGAAACGCTCAGGTCAGGAAACCACGTAGAACTTGTG
CCAACCCGTTATAACTGCGTGAACACAACCATGACTTTTGGCGTCAATATATAATCTTCG
GCTGCTACCATCAGTACTTCTCCGAAGTACGAATCGACACGTTGATGA
>Rosalind_8156
ATAGAGGTTTGAAGGAGGAGATCAGGTCAGTCTACATCGTACAAGAGGCGGCGTGTTGTC
ATCCATATTAACATACAAGCTGACACGTCAGCCCGACTCGCTGCATCGTTTCCGAGTAGA
AAAGTGTCTTCTTCGGGAGCTACTTGGACGGCGTCTCTCCGCCTCGGGGAAGATATGCTA
CATCATGTACGATTAAATCTGGACAACGGGGTGGTACTGGATGACGTTGAGAACAGTATT
GGCCGTGGTTAACGCCTAGGTCACTGCGCCTACTACCCAATTGTCCAGATACGCATGCTG
CCCCCACCACCCCCTGTGTTCGAAAGCATGCTCGTAATATTTGGCGAAAAGATCTGCGCC
CTTACCACCTTTCGAAATTTGTTGCCATGTGACACTCTCCAACCCAGAGCACTTAGATTC
TCACCGTGCCGAGCTACAAAGCCATTGACAATCTAAGCCTGTATACCAGTGTGTCACCCG
ACCTTCGTTTCGCATGAAGCGCTGTAACAGTATGGAAACAGACAAATTTTTTTGACTTTG
GCTCACACGCACCCACCGGGTTAAGCTAACATTTGGTTATCGCGACAGGAACCGGTTCCC
ATCAGCCATTGTATTTTCCCGCGTAAATCTGGGGCTCTGTACCCTACCAAGCACCGACTC
CTTTCTGTAAAGTTTAACGGGCCGCCAAGCTCCAAAGCGTCCCTCACCGCGAAGCCACAT
GCGGAACCACCAATGGCCGCGCACAGTGGATATGGGTGCAAGCGTCACGTGAGTGCGCGT
ACGATAATGTATTGAAAGGTCTGCAGTCGGTACCTTTGA
`)

	fasta := ParseFASTA(data)

	maxGC := -1.0
	maxLabel := ""

	for idx, label := range fasta.Labels {
		dna, _ := NewDNA(fasta.Data[idx])
		gc := dna.GCContentPercent()

		if gc > maxGC {
			maxGC = gc
			maxLabel = label
		}
	}

	if maxLabel != "Rosalind_8156" {
		t.Errorf("expected Rosalind_8156, got %s", maxLabel)
	}

	if int(maxGC*10000000) != 5103785 {
		t.Errorf("expected 51.03785103785, got %f", maxGC)
	}
}
