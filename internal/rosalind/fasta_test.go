package rosalind

import (
	"bytes"
	"fmt"
	"strings"
	"testing"
)

func Test_ParseFASTA(t *testing.T) {
	t.Parallel()

	fileData := strings.NewReader(`>SEQUENCE_1
MTEITAAMVKELRESTGAGMMDCKNALSETNGDFDKAVQLLREKGLGKAAKKADRLAAEG
LVSVKVSDDFTIAAMRPSYLSYEDLDMTFVENEYKALVAELEKENEERRRLKDPNKPEHK
IPQFASRKQLSDAILKEAEEKIKEELKAQGKPEKIWDNIIPGKMNSFIADNSQLDSKLTL
MGQFYVMDDKKTVEQVIAEKEKEFGGKIKIVEFICFEVGEGLEKKTEDFAAEVAAQL
>SEQUENCE_EMPTY

>SEQUENCE_2
SATVSEINSETDFVAKNDQFIALTKDTTAHIQSNSLQSVEELHSSTINGVKFEEYLKSQI
ATIGENLVVRRFATLKAGANGVVNGYIHTNGRVGVVIAAACDSAEVASKSRDLLRQICMH`)

	fasta := ParseFASTA(fileData)

	t.Log(fasta.Sequences)

	sequence1 := fasta.GetData("SEQUENCE_1")
	if string(sequence1) != "MTEITAAMVKELRESTGAGMMDCKNALSETNGDFDKAVQLLREKGLGKAAKKADRLAAEGLVSVKVSDDFTIAAMRPSYLSYEDLDMTFVENEYKALVAELEKENEERRRLKDPNKPEHKIPQFASRKQLSDAILKEAEEKIKEELKAQGKPEKIWDNIIPGKMNSFIADNSQLDSKLTLMGQFYVMDDKKTVEQVIAEKEKEFGGKIKIVEFICFEVGEGLEKKTEDFAAEVAAQL" {
		t.Errorf("sequence 1 not correct")
		t.Log(string(sequence1))
		t.Log("MTEITAAMVKELRESTGAGMMDCKNALSETNGDFDKAVQLLREKGLGKAAKKADRLAAEGLVSVKVSDDFTIAAMRPSYLSYEDLDMTFVENEYKALVAELEKENEERRRLKDPNKPEHKIPQFASRKQLSDAILKEAEEKIKEELKAQGKPEKIWDNIIPGKMNSFIADNSQLDSKLTLMGQFYVMDDKKTVEQVIAEKEKEFGGKIKIVEFICFEVGEGLEKKTEDFAAEVAAQL")
	}

	sequence2 := fasta.GetData("SEQUENCE_2")
	if string(sequence2) != "SATVSEINSETDFVAKNDQFIALTKDTTAHIQSNSLQSVEELHSSTINGVKFEEYLKSQIATIGENLVVRRFATLKAGANGVVNGYIHTNGRVGVVIAAACDSAEVASKSRDLLRQICMH" {
		t.Errorf("sequence 2 not correct")
		t.Log(string(sequence2))
		t.Log("SATVSEINSETDFVAKNDQFIALTKDTTAHIQSNSLQSVEELHSSTINGVKFEEYLKSQIATIGENLVVRRFATLKAGANGVVNGYIHTNGRVGVVIAAACDSAEVASKSRDLLRQICMH")
	}

	sequenceEmpty := fasta.GetData("SEQUENCE_EMPTY")
	if len(sequenceEmpty) != 0 {
		t.Errorf("sequence empty not correct")
		t.Log(string(sequenceEmpty))
		t.Log("")
	}
	if sequenceEmpty == nil {
		t.Log("sequence empty is nil")
	}

	sequenceNotFound := fasta.GetData("SEQUENCE_NOT_FOUND")
	if len(sequenceNotFound) != 0 {
		t.Errorf("sequence not found not correct")
		t.Log(string(sequenceNotFound))
	}
}

func TestFASTA_WriteTo(t *testing.T) {
	t.Parallel()

	dataStr := `>SEQUENCE_1
MTEITAAMVKELRESTGAGMMDCKNALSETNGDFDKAVQLLREKGLGKAAKKADRLAAEG
LVSVKVSDDFTIAAMRPSYLSYEDLDMTFVENEYKALVAELEKENEERRRLKDPNKPEHK
IPQFASRKQLSDAILKEAEEKIKEELKAQGKPEKIWDNIIPGKMNSFIADNSQLDSKLTL
MGQFYVMDDKKTVEQVIAEKEKEFGGKIKIVEFICFEVGEGLEKKTEDFAAEVAAQL
>SEQUENCE_EMPTY

>SEQUENCE_2
SATVSEINSETDFVAKNDQFIALTKDTTAHIQSNSLQSVEELHSSTINGVKFEEYLKSQI
ATIGENLVVRRFATLKAGANGVVNGYIHTNGRVGVVIAAACDSAEVASKSRDLLRQICMH
`
	fileData := strings.NewReader(dataStr)

	fasta := ParseFASTA(fileData)
	buffer := bytes.NewBuffer(nil)

	n, err := fasta.WriteTo(buffer)
	if err != nil {
		t.Fatalf("error writing fasta to buffer: %v", err)
	}

	if n != int64(buffer.Len()) {
		t.Errorf("buffer length not correct %d != %d", n, buffer.Len())
	}
	if n != int64(len(dataStr)) {
		t.Errorf("buffer length not correct %d != %d", n, len(dataStr))
	}

	if buffer.String() != dataStr {
		t.Errorf("buffer contents not correct")
		t.Logf("ORIGINAL\n%q", dataStr)
		t.Logf("SAVED\n%q", buffer.String())
	}
}

func TestFASTA_Graph_simple(t *testing.T) {
	t.Parallel()

	fasta := ParseFASTA(strings.NewReader(`>Rosalind_0498
AAATAAA
>Rosalind_2391
AAATTTT
>Rosalind_2323
TTTTCCC
>Rosalind_0442
AAATCCC
>Rosalind_5013
GGGTGGG`))

	graph := fasta.Graph(3)
	overlap := FASTAOverlapGraph(graph)
	for _, value := range overlap {
		t.Logf("%v", value)
	}
}

func TestFASTA_(t *testing.T) {
	t.Parallel()

	fasta := ParseFASTA(strings.NewReader(`>sp|B5ZC00|SYG_UREU1 Glycine--tRNA ligase OS=Ureaplasma urealyticum serovar 10 (strain ATCC 33699 / Western) OX=565575 GN=glyQS PE=3 SV=1
MKNKFKTQEELVNHLKTVGFVFANSEIYNGLANAWDYGPLGVLLKNNLKNLWWKEFVTKQ
KDVVGLDSAIILNPLVWKASGHLDNFSDPLIDCKNCKARYRADKLIESFDENIHIAENSS
NEEFAKVLNDYEISCPTCKQFNWTEIRHFNLMFKTYQGVIEDAKNVVYLRPETAQGIFVN
FKNVQRSMRLHLPFGIAQIGKSFRNEITPGNFIFRTREFEQMEIEFFLKEESAYDIFDKY
LNQIENWLVSACGLSLNNLRKHEHPKEELSHYSKKTIDFEYNFLHGFSELYGIAYRTNYD
LSVHMNLSKKDLTYFDEQTKEKYVPHVIEPSVGVERLLYAILTEATFIEKLENDDERILM
DLKYDLAPYKIAVMPLVNKLKDKAEEIYGKILDLNISATFDNSGSIGKRYRRQDAIGTIY
CLTIDFDSLDDQQDPSFTIRERNSMAQKRIKLSELPLYLNQKAHEDFQRQCQK`))

	t.Log(fasta.Sequences)

	buffer := bytes.NewBuffer(nil)
	_, _ = fasta.WriteTo(buffer)
	fmt.Println(buffer.String())

	t.Log(fasta.Sequences)
}
